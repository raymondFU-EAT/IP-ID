import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class FindIdAndIp {
    public static void main(String[] args) {
        // 資料夾路徑
        String folderPath = "C:/path/to/folder";
        // 身份證字號正則表達式
        String idRegex = "[A-Z][1-2]\\d{8}";
        // IP正則表達式
        String ipRegex = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";

        // 新增Excel工作簿
        Workbook workbook = new XSSFWorkbook();
        // 新增工作表
        Sheet sheet = workbook.createSheet("搜尋結果");
        // 設定表頭
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("檔案名稱");
        headerRow.createCell(1).setCellValue("身份證字號");
        headerRow.createCell(2).setCellValue("IP");

        // 遍歷資料夾內的所有文件
        int rowNum = 1;
        for (File file : new File(folderPath).listFiles()) {
            // 新增表頭行
            Row fileRow = sheet.createRow(rowNum++);
            fileRow.createCell(0).setCellValue(file.getName());

            // 讀取文件內容，使用try-with-resources自動關閉流
            String content = "";
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                content = br.lines().reduce("", (a, b) -> a + "\n" + b);
            } catch (IOException e) {
                e.printStackTrace();
            }

            // 找出身份證字號
            Pattern idPattern = Pattern.compile(idRegex);
            Matcher idMatcher = idPattern.matcher(content);
            while (idMatcher.find()) {
                Row row = sheet.getRow(rowNum);
                if (row == null) {
                    row = sheet.createRow(rowNum);
                }
                row.createCell(1).setCellValue(idMatcher.group());
                rowNum++;
            }

            // 找出IP
            Pattern ipPattern = Pattern.compile(ipRegex);
            Matcher ipMatcher = ipPattern.matcher(content);
            while (ipMatcher.find()) {
                Row row = sheet.getRow(rowNum);
                if (row == null) {
                    row = sheet.createRow(rowNum);
                }
                row.createCell(2).setCellValue(ipMatcher.group());
                rowNum++;
            }
        }

        // 寫入Excel檔案，使用try-with-resources自動關閉工作簿
        try (workbook) {
            workbook.write(new File("output.xlsx"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
在Spring Boot中，通常不直接使用web.xml文件进行配置，而是使用基于注解的方式进行配置。不过，如果你希望在Spring Boot项目中导入web.xml文件，你可以按照以下步骤进行操作：

在Spring Boot项目的src/main/webapp/WEB-INF/目录下创建web.xml文件（如果目录结构不存在，可以手动创建）。

在web.xml文件中添加你需要的配置，例如servlet、filter等。以下是一个示例web.xml文件的基本结构：

xml
Copy code
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
         
    <!-- 添加你的servlet配置 -->
    <servlet>
        <servlet-name>myServlet</servlet-name>
        <servlet-class>com.example.MyServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>myServlet</servlet-name>
        <url-pattern>/myservlet</url-pattern>
    </servlet-mapping>
    
    <!-- 添加你的filter配置 -->
    <filter>
        <filter-name>myFilter</filter-name>
        <filter-class>com.example.MyFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>myFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
</web-app>
确保在pom.xml文件中添加了web依赖，以便支持Servlet容器和Web应用程序。在<dependencies>部分添加以下依赖项：
xml
Copy code
<dependencies>
    <!-- 其他依赖项 -->
    
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
    </dependency>
    
    <!-- 其他依赖项 -->
</dependencies>
运行Spring Boot应用程序。web.xml文件将由Servlet容器加载和解析，并应用其中的配置。
需要注意的是，推荐在Spring Boot项目中使用基于注解的配置方式（如使用@WebServlet、@WebFilter等注解），以便更好地利用Spring Boot的自动配置和依赖注入功能。使用基于注解的配置方式，可以避免直接依赖于web.xml文件，更符合Spring Boot的约定优于配置的原则。
